openapi: 3.0.0
info:
  version: '2.0.0'
  title: 'SDMX RESTful API, v2.0.0'
  description: |
    The SDMX RESTful API, released in XXX 2021.

    For additional information, check the [official sdmx-rest specification](https://github.com/sdmx-twg/sdmx-rest/tree/master/v2_1/ws/rest/docs) or the [dedicated Wiki](https://github.com/sdmx-twg/sdmx-rest/wiki).
x-commons:
  common_responses: &common_responses
    '304':
      $ref: '#/components/responses/304'
    '400':
      $ref: '#/components/responses/400'
    '401':
      $ref: '#/components/responses/401'
    '403':
      $ref: '#/components/responses/403'
    '404':
      $ref: '#/components/responses/404'
    '406':
      $ref: '#/components/responses/406'
    '413':
      $ref: '#/components/responses/413'
    '414':
      $ref: '#/components/responses/414'
    '500':
      $ref: '#/components/responses/500'
    '501':
      $ref: '#/components/responses/501'
    '503':
      $ref: '#/components/responses/503'

paths:
  /data/{context}/{agencyID}/{resourceID}/{version}/{key}:
    get:
      summary: 'Data query'
      parameters:
        - $ref: '#/components/parameters/dataContext'
        - $ref: '#/components/parameters/agencyID'
        - $ref: '#/components/parameters/resourceID'
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/c'
        - $ref: '#/components/parameters/updatedAfter'
        - $ref: '#/components/parameters/firstNObservations'
        - $ref: '#/components/parameters/lastNObservations'
        - $ref: '#/components/parameters/dimensionAtObservation'
        - $ref: '#/components/parameters/detail'
        - $ref: '#/components/parameters/includeHistory'
        - $ref: '#/components/parameters/accept-encoding'
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/if-modified-since'
      responses:
        <<: *common_responses
        '200':
          $ref: '#/components/responses/200'


  /availability/{context}/{agencyID}/{resourceID}/{version}/{key}/{componentID}:
    get:
      summary: 'Data availability query'
      parameters:
        - $ref: '#/components/parameters/dataContext'
        - $ref: '#/components/parameters/agencyID'
        - $ref: '#/components/parameters/resourceID'
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/componentID'
        - $ref: '#/components/parameters/c'
        - $ref: '#/components/parameters/mode'
        - $ref: '#/components/parameters/acreferences'
        - $ref: '#/components/parameters/updatedAfter'
        - $ref: '#/components/parameters/accept-encoding'
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/if-modified-since'
      responses:
        <<: *common_responses
        '200':
          $ref: '#/components/responses/200-struct'

  /structure/{structureType}/{agencyID}/{resourceID}/{version}:
    get:
      summary: 'Structure query'
      parameters:
        - $ref: '#/components/parameters/structureType'
        - $ref: '#/components/parameters/agencies'
        - $ref: '#/components/parameters/resourceIDs'
        - $ref: '#/components/parameters/versions'
        - $ref: '#/components/parameters/references'
        - $ref: '#/components/parameters/structDetail'
        - $ref: '#/components/parameters/accept-encoding'
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/if-modified-since'
      responses:
        <<: *common_responses
        '200':
          $ref: '#/components/responses/200-struct'

  /structure/{itemSchemeType}/{agencyID}/{resourceID}/{version}/{itemID}:
    get:
      summary: 'Item Scheme query'
      parameters:
        - $ref: '#/components/parameters/itemSchemeType'
        - $ref: '#/components/parameters/agencies'
        - $ref: '#/components/parameters/resourceIDs'
        - $ref: '#/components/parameters/versions'
        - $ref: '#/components/parameters/items'
        - $ref: '#/components/parameters/references'
        - $ref: '#/components/parameters/structDetail'
        - $ref: '#/components/parameters/accept-encoding'
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/if-modified-since'
      responses:
        <<: *common_responses
        '200':
          $ref: '#/components/responses/200-struct'

  /schema/{context}/{agencyID}/{resourceID}/{version}:
    get:
      summary: 'Schema query'
      parameters:
        - $ref: '#/components/parameters/context'
        - $ref: '#/components/parameters/agencyID'
        - $ref: '#/components/parameters/resourceID'
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/dimensionAtObservation'
        - $ref: '#/components/parameters/explicitMeasure'
        - $ref: '#/components/parameters/accept-encoding'
        - $ref: '#/components/parameters/if-modified-since'
      responses:
        <<: *common_responses
        '200':
          $ref: '#/components/responses/200-schemas'

components:
  parameters:
    dataContext:
      in: path
      name: context
      required: true
      schema:
        type: string
        enum: [datastructure, dataflow, provisionagreement]
    key:
      in: path
      name: key
      required: true
      schema:
        type: string
        pattern: '^([\.A-Za-z\d_@$-]+(\+[A-Za-z\d_@$-]+)*)*$'
    structureType:
      in: path
      name: structureType
      description: |
        The type of structural metadata to be retrieved (e.g. codelist, datastructure, etc.).

        The keyword `all` can be used to indicate that any type of artefact can be returned.
      required: true
      schema:
        type: string
        enum: [datastructure, metadatastructure, dataflow, metadataflow, provisionagreement, structureset, process, categorisation, dataconstraint, metadataconstraint, conceptscheme, codelist, categoryscheme, hierarchicalcodelist, organisationscheme, agencyscheme, dataproviderscheme, dataconsumerscheme, organisationunitscheme, transformationscheme, rulesetscheme, userdefinedoperatorscheme, customtypescheme, namepersonalisationscheme, vtlmappingscheme, all]
    itemSchemeType:
      in: path
      name: itemSchemeType
      description: |
        The type of item schemes to be retrieved (e.g. codelist, concept scheme, etc.).

        The keyword `all` can be used to indicate that any type of item scheme can be returned.
      required: true
      schema:
        type: string
        enum: [conceptscheme, codelist, categoryscheme, hierarchicalcodelist, organisationscheme, agencyscheme, dataproviderscheme, dataconsumerscheme, organisationunitscheme, transformationscheme, rulesetscheme, userdefinedoperatorscheme, customtypescheme, namepersonalisationscheme, vtlmappingscheme, all]
    context:
      in: path
      name: context
      description: |
        The value of this parameter determines the **constraints taken into account** when generating the schema.
        
        Possible options are:
        
        * `datastructure`: Constraints attached to the DSD are applied.
        * `metadatastructure`: Constraints attached to the MSD are applied.  
        * `dataflow`: Constraints attached to the dataflow and to the DSD used in the dataflow are applied.
        * `metadataflow`: Constraints attached to the metadataflow and to the MSD used in the metadataflow are applied. 
        * `provisionagreement`: Constraints attached to the provision agreement, as well as to the dataflow or metadafalow used in the agreement and the DSD or MSD used in the dataflow or metadataflow are applied.
      required: true
      schema:
        type: string
        enum: [datastructure, metadatastructure, dataflow, metadataflow, provisionagreement]
    agencyID:
      in: path
      name: agencyID
      required: true
      schema:
        type: string
        pattern: '^[A-Za-z][A-Za-z\d_-]*(\.[A-Za-z][A-Za-z\d_-]*)*$'
    resourceID:
      in: path
      name: resourceID
      required: true
      schema:
        type: string
        pattern: '^[A-Za-z\d_@$-]+$'
    version:
      in: path
      name: version
      required: true
      schema:
        type: string
        pattern: '^\+|~|(0|[1-9]\d*[\+~]?|[\+~]?)\.(0|[1-9]\d*[\+~]?|[\+~]?)\.?(0|[1-9]\d*[\+~]?|[\+~]?)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
    agencies:
      in: path
      name: agencyID
      description: |
        The agency maintaining the artefact to be returned. 
        
        It is possible to set more than one agency, using `+` as separator (e.g. BIS+ECB).
        
        The keyword `all` can be used to indicate that artefacts maintained by any maintenance agency should be returned.
      required: true
      schema:
        type: string
        pattern: '^(([A-Za-z][A-Za-z\d_-]*)(\.[A-Za-z][A-Za-z\d_-]*)*,)?[A-Za-z\d_@$-]+(\+([A-Za-z][A-Za-z\d_-]*(\.[A-Za-z][A-Za-z\d_-]*)*,)?[A-Za-z\d_@$-]+)*$'
    resourceIDs:
      in: path
      name: resourceID
      description: |
        The id of the artefact to be returned.
        
        It is possible to set more than one id, using `+` as separator (e.g. CL_FREQ+CL_CONF_STATUS).
        
        The keyword `all` can be used to indicate that any artefact of the specified resource type, {agencyID} and {version} should be returned. 
      required: true
      schema:
        type: string
        pattern: '^([A-Za-z\d_@$-]+(\+[A-Za-z\d_@$-]+)*)*$'
    versions:
      in: path
      name: version
      description: | 
        The version of the artefact to be returned. 
        
        It is possible to set more than one version, using `+` as separator (e.g. 1.0+2.1).
        
        The operator `*` can be used to return all versions (whether stable, draft or non-versioned) of the matching resource.
        
        The operator `~` can be used to return the latest version (whether stable, draft or non-versioned) of the matching resource.
        
        The operator `+` can be used to return the latest stable version of the matching resource.
      required: true
      schema:
        type: string
        pattern: '^(\+|~|\*|(0|[1-9]\d*[\+\*~]?|[\+\*~]?)\.(0|[1-9]\d*[\+\*~]?|[\+\*~]?)\.?(0|[1-9]\d*[\+\*~]?|[\+\*~]?)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(,(\+|~|\*|(0|[1-9]\d*[\+\*~]?|[\+\*~]?)\.(0|[1-9]\d*[\+\*~]?|[\+\*~]?)\.?(0|[1-9]\d*[\+\*~]?|[\+\*~]?)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?))?$'
    items:
      in: path
      name: itemID
      description: |
        The id of the item to be returned. 
        
        It is possible to set more than one id, using `+` as separator (e.g. A+Q+M).
        
        The keyword `all` can be used to return all items of the matching resource.
      required: true
      schema:
        type: string
        pattern: '^[A-Za-z\d_@$-]+(\.[A-Za-z\d_@$-]+)*(\+[A-Za-z\d_@$-]+(\.[A-Za-z\d_@$-]+)*)*$'
    componentID:
      in: path
      name: componentID
      description: |
        The id of the Dimension for which to obtain availability information about. Use all to indicate that data availability should be provided for all dimensions.
      required: true
      schema:
        type: string
        pattern: '^[A-Za-z][A-Za-z\d_-]*$'
    c:
      in: query
      name: c
      required: false
      schema:
        type: object
    updatedAfter:
      in: query
      name: updatedAfter
      description: |
        The last time the query was performed by the client. 
        
        The response should include the latest version of what has changed in the database since that point in time (i.e. additions, revisions or deletions since the last time the query was performed).
      required: false
      schema:
        type: string
        format: date-time
    firstNObservations:  
      in: query
      name: firstNObservations
      description: |
        The maximum number of observations to be returned starting from the oldest one
      required: false
      schema:
        type: integer
        minimum: 1
    lastNObservations:
      in: query
      name: lastNObservations
      description: |
        The maximum number of observations to be returned starting from the most recent one
      required: false
      schema:
        type: integer
        minimum: 1
    dimensionAtObservation:
      in: query
      name: dimensionAtObservation
      description: |
        Indicates **how the data should be packaged**. 
        
        The options are:
        
        * `TIME_PERIOD`: A timeseries view
        * The ID of any other dimension: A cross-sectional view of the data 
        * `AllDimensions`: A flat view of the data.
      required: false
      schema:
        type: string
        pattern: '^[A-Za-z][A-Za-z\d_-]*$'
        default: TIME_PERIOD
    detail:
      in: query
      name: detail
      description: |
        The **amount of information** to be returned. 
        
        Possible options are: 
        
        * `full`: All data and documentation
        * `dataonly`: Everything except attributes
        * `serieskeysonly`: The series keys. This is useful to return the series that match a certain query, without returning the actual data (e.g. overview page)
        * `nodata`: The series, including attributes and annotations, without observations.
      required: false
      schema:
        type: string
        enum: [full, dataonly, serieskeysonly, nodata]
        default: full
    includeHistory:
      in: query
      name: includeHistory
      description: | 
        Retrieve **previous versions of the data**. 
        
        When `true`, the response will contain up to two datasets per dissemination, one containing new or updated values and one containing the deleted data (if any). 
      required: false
      schema:
        type: boolean
        default: false
    explicitMeasure:
      in: query
      name: explicitMeasure
      description: | 
        For cross-sectional data validation, indicates whether observations are strongly typed 
      required: false
      schema:
        type: boolean
        default: false
    structDetail:
      in: query
      name: detail
      description: |
        The amount of information to be returned.
        
        Possible values are: 
        
        * `full`: all available information for all returned artefacts should be returned. Returned extended codelists are to be resolved, i.e. include all inherited codes, and must not include the `ExtendedBy` property. As the inherited codelists must be resolved, they should not be returned a second time as separated codelists.
        * `allstubs`: all returned artefacts should be returned as stubs, i.e. only containing identification information and the artefacts' name. 
        * `referencestubs`: same as full with the exception that referenced artefacts should be returned only as stubs, i.e. only containing identification information and the artefacts' name. 
        * `allcompletestubs`: all returned artefacts should be returned as complete stubs, i.e. only containing identification information, the artefacts' name, description, annotations and isFinal information. 
        * `referencecompletestubs`: same as full with the exception that referenced artefacts should be returned as complete stubs, i.e. only containing identification information, the artefacts' name, description, annotations and isFinal information.
        * `referencepartial`: same as full with the exception that referenced item schemes should only include items used by the artefact to be returned. For example, a concept scheme would only contain the concepts used in a DSD, and its isPartial flag would be set to true. Likewise, if a dataflow has been constrained, then the codelists referenced by the DSD referenced by the dataflow should only contain the codes allowed by the content constraint.
        * `raw`: same as full with the exception that the returned extended codelists are not resolved and must include the `ExtendedBy` property, and if referenced codelists or descendants are to be returned then they include also all inherited codelists.
        * `partialraw`: same as raw with the exception that referenced item schemes, also including returned inherited codelists, should only include items used by the artefact to be returned, similar to the value `referencepartial`. 
      required: false
      schema:
        type: string
        enum: [allstubs, referencestubs, referencepartial, allcompletestubs, referencecompletestubs, full]
        default: full
    references:
      in: query
      name: references
      description: |
        Instructs the web service to return (or not) the artefacts referenced by the artefact to be returned.
        
        Possible values are: 
        
        * `none`: No references will be returned
        * `parents`: Returns the artefacts that use the artefact matching the query
        * `parentsandsiblings`: Returns the artefacts that use the artefact matching the query, as well as the artefacts referenced by these artefacts
        * `children`: Returns the artefacts referenced by the artefact to be returned
        * `descendants`: References of references, up to any level, will be returned
        * `all`: The combination of parentsandsiblings and descendants
        * In addition, a concrete type of resource may also be used (for example, references=codelist).
      required: false
      schema:
        type: string
        enum: [none, parents, parentsandsiblings, children, descendants, all, datastructure, metadatastructure, categoryscheme, conceptscheme, codelist, hierarchicalcodelist, organisationscheme, agencyscheme, dataproviderscheme, dataconsumerscheme, organisationunitscheme, dataflow, metadataflow, reportingtaxonomy, provisionagreement, structureset, process, categorisation, dataconstraint, metadataconstraint, transformationscheme, rulesetscheme, userdefinedoperatorscheme, customtypescheme, namepersonalisationscheme, namealiasscheme]
        default: none
    mode:
      in: query
      name: mode
      description: |
        Instructs the web service to return a Constraint which defines a Cube Region containing values which will be returned by executing the query (mode="exact") vs a Cube Region showing what values remain valid selections that could be added to the data query (mode="available"). A valid selection is one which results in one or more series existing for the selected value, based on the current data query selection state defined by the current path parameters.
      required: false
      schema:
        type: string
        enum: [exact, available]
        default: exact
    acreferences:
      in: query
      name: references
      description: |
        Instructs the web service to return (or not) the artefacts referenced by the Constraint to be returned.
      required: false
      schema:
        type: string
        enum: [none, all, datastructure, conceptscheme, codelist, dataproviderscheme, dataflow]
        default: none
    accept-encoding:
      in: header
      name: Accept-Encoding
      description: |
        Specifies whether the response should be compressed and how. 
        
        `identity` (the default) indicates that no compression will be performed.
      schema:
        type: string
        enum: [br, compress, deflate, exi, gzip, identity, pack200-gzip, zstd]
        default: identity
    accept-language:
      in: header
      name: Accept-Language
      description: |
        Specifies the client's preferred language. 
      schema:
        type: string
    if-modified-since:
      in: header
      name: If-Modified-Since
      description: |
        Instructs to return the content matching the query only if it has changed since the supplied timestamp. 
      schema:
        type: string
        format: date-time
        
  responses:
    '200':
      description: OK
      content:
        application/vnd.sdmx.genericdata+xml;version=2.1:
          schema:
            type: string
        application/vnd.sdmx.structurespecificdata+xml;version=2.1:
          schema:
            type: string
        application/vnd.sdmx.generictimeseriesdata+xml;version=2.1:
          schema:
            type: string
        application/vnd.sdmx.structurespecifictimeseriesdata+xml;version=2.1:
          schema:
            type: string
        application/vnd.sdmx.data+csv;version=1.0.0:
          schema:
            type: string
        application/vnd.sdmx.data+json;version=1.0.0:
          schema:
            type: string
    '200-schemas':
      description: OK
      content:
        application/vnd.sdmx.schema+xml;version=2.1:
          schema:
            type: string
        application/vnd.sdmx.structure+xml;version=2.1:
          schema:
            type: string
        application/vnd.sdmx.structure+json;version=1.0.0:
          schema:
            type: string
    '200-struct':
      description: OK
      content:
        application/vnd.sdmx.structure+xml;version=2.1:
          schema:
            type: string
        application/vnd.sdmx.structure+json;version=1.0.0:
          schema:
            type: string
    '304':
      description: No changes
    '400': 
      description: Bad syntax
    '401': 
      description: Unauthorized
    '403': 
      description: Forbidden
    '404': 
      description: Not found
    '406':
      description: Not acceptable
    '413': 
      description: Request entity too large
    '414':
      description: URI too long
    '500': 
      description: Internal server error
    '501': 
      description: Not implemented
    '503': 
      description: Service unavailable
